/**
This Library is a wrapper for macOS & iOS AVIMIDIPlayer, useful for playing MIDI musical performance data.

Description:
This Library is a wrapper for macOS & iOS AVIMIDIPlayer.

>*Note:* This library is MIT licensed (permissive).
> Please share and share a like.
*/

library org.oxt.avaudiorecorder.paulmcclernan

use com.livecode.engine
use com.livecode.foreign
use com.livecode.objc
use com.livecode.array
use com.livecode.list
use com.livecode.byte
use com.livecode.binary
use com.livecode.assert

metadata version is "0.1"
metadata author is "Paul McClernan"
metadata title is "AVAudioRecorder library"
-- metadata svgicon is ""

-- kAudioFormatLinearPCM = 'lpcm'
-- kAudioFormatMPEG4AAC = 'aac '
-- kAudioFormatAppleLossless = 'alac'
-- kAudioFormatAppleIMA4 = 'ima4'
-- kAudioFormatMPEGD_USAC = 'usac'
-- kAudioFormatMPEG4CELP = 'celp'
-- kAudioFormatMPEG4HVXC = 'hvxc'
-- kAudioFormatMPEG4TwinVQ = 'twvq'
-- kAudioFormatMPEG4AAC_HE = 'aach'
-- kAudioFormatMPEG4AAC_LD = 'aacl'
-- kAudioFormatMPEG4AAC_ELD = 'aace'
-- kAudioFormatMPEG4AAC_ELD_SBR = 'aacf'
-- kAudioFormatMPEG4AAC_ELD_V2 = 'aacg'
-- kAudioFormatMACE3 = 'MAC3'
-- kAudioFormatMACE6 = 'MAC6'
-- kAudioFormatULaw = 'ulaw'
-- kAudioFormatALaw = 'alaw'
-- kAudioFormatAudible = 'AUDB'
-- kAudioFormatQDesign = 'QDMC'
-- kAudioFormatQDesign2 = 'QDM2'
-- kAudioFormatQUALCOMM = 'Qclp'
-- kAudioFormatMPEGLayer1 = '.mp1'
-- kAudioFormatMPEGLayer2 = '.mp2'
-- kAudioFormatMPEGLayer3 = '.mp3'
-- kAudioFormatMIDIStream = 'midi'
-- kAudioFormatMicrosoftGSM = 0x6D730031
-- kAudioFormatDVIIntelIMA = 0x6D730011
-- kAudioFormatiLBC = 'ilbc' -- low bandwidth speech codec
-- kAudioFormatFLAC = 'flac'
-- kAudioFormatOpus = 'opus'
-- AVAudioSessionCategory = "AVAudioSessionCategoryPlayAndRecord"

private foreign handler objC_NSURLURLWithString(in pURLString as ObjcId) returns ObjcId binds to "objc:NSURL.+URLWithString:"
private foreign handler objC_NSURLfileOrDirURLWithPath(in pPathString as ObjcId, in pIsDir as CBool) returns ObjcId binds to "objc:.NSURL.+fileURLWithPath:isDirectory:"
private foreign handler objC_NSURLfileURLWithPath(in pPathString as ObjcId) returns ObjcId binds to "objc:NSURL.+fileURLWithPath:"

-- private foreign handler objC_NSErrorAlloc() returns ObjcRetainedId binds to "objc:NSError.+alloc"
private foreign handler objC_NSErrorAlloc() returns ObjcId binds to "objc:NSError.+alloc"

private foreign handler objC_NSObjectRetain(in pNSObj as ObjcId) returns ObjcId binds to "objc:NSObject.-retain"
private foreign handler objC_NSObjectAutoRealease(in pNSObj as ObjcId) returns ObjcId binds to "objc:NSObject.-autorelease"
private foreign handler objC_NSObjectRelease(in pNSObj as ObjcId) returns nothing binds to "objc:NSObject.-release"

private foreign handler objC_NSMutableArrayAlloc() returns ObjcRetainedId binds to "objc:NSMutableArray.+alloc"
private foreign handler objC_NSMutableArrayInitWithCapacity(in pNSMutableArray as ObjcId, in pCapacity as NaturalFloat) returns ObjcId binds to "objc:NSMutableArray.-initWithCapacity:"
private foreign handler objC_NSMutableArrayInitWithNSArray(in pNSMutableArray as ObjcId, in pNSArray as ObjcId) returns ObjcId binds to "objc:NSMutableArray.-initWithArray:"
private foreign handler c_CFErrorCopyDescription(in pCFErrorRef as ObjcId) returns ObjcId binds to "c:CFErrorCopyDescription"

private foreign handler objC_AVAudioSession() returns ObjcId binds to "objc:AVAudioSession.+sharedInstance"
private foreign handler objC_AVAudioSessionGetCategory(in pAVAudioSession as ObjcId ) returns ObjcId binds to "objc:AVAudioSession.category"
private foreign handler objC_AVAudioSessionSetCategory(in pAVAudioSession as ObjcId, in pAVAudioSessionCategory as ObjcId, out rNSError as ObjcId) returns CBool binds to "objc:AVAudioSession.-setCategory:error:"
private foreign handler objC_AVAudioSessionRequestRecordPermission(in pAVAudioSession as ObjcId, in pGrantedHandler as ObjcBlockPointer) returns nothing binds to "objc:AVAudioSession.-requestRecordPermission:"
-- - (void)requestRecordPermission:(void (^)(BOOL granted))response;

private foreign handler objC_AVAudioRecorderAlloc() returns ObjcRetainedId binds to "objc:AVAudioRecorder.+alloc"
private foreign handler objC_AVAudioRecorderInitWithURLAndSettings(in pAVAudioRecorder as ObjcRetainedId, in pFileNSURL as ObjcId, in pSettingsNSDict as ObjcId, out pNSError as ObjcId) returns optional ObjcId binds to "objc:AVAudioRecorder.-initWithURL:settings:error:" -- initWithURL:format:error:
private foreign handler objC_AVAudioRecorderInitWithURLAndFormat(in pAVAudioRecorder as ObjcRetainedId, in pFileNSURL as ObjcId, in pAVAudioFormat as ObjcId, out pNSError as ObjcId) returns optional ObjcId binds to "objc:AVAudioRecorder.-initWithURL:format:error:"
-- AVAudioFormat -initStandardFormatWith
private foreign handler objC_AVAudioFormatAlloc() returns ObjcRetainedId binds to "objc:AVAudioFormat.+alloc"
private foreign handler objC_AVAudioFormatInitStandardFormatWithSampleRateAndChannels(in pAVAudioFormat as ObjcRetainedId, in pSampRate as CDouble, in pChCnt as UInt32 ) returns optional ObjcId binds to "objc:AVAudioFormat.-initStandardFormatWithSampleRate:channels:" -- initWithURL:format:error:
--  The returned AVAudioFormat instance uses the AVAudioPCMFormatFloat32 format.

private foreign handler objC_AVAudioRecorderPrepareToRecord(in pAVAudioRecorder as ObjcId) returns CBool binds to "objc:AVAudioRecorder.-prepareToRecord"
private foreign handler objC_AVAudioRecorderRecord(in pAVAudioRecorder as ObjcId) returns CBool binds to "objc:AVAudioRecorder.-record"
private foreign handler objC_AVAudioRecorderStop(in pAVAudioRecorder as ObjcId) returns CBool binds to "objc:AVAudioRecorder.-stop"
private foreign handler objC_AVAudioRecorderDuration(in pAVAudioRecorder as ObjcId) returns NaturalFloat binds to "objc:AVAudioRecorder.duration"
private foreign handler objC_AVAudioRecorderCurrentPosition(in pAVAudioRecorder as ObjcId) returns NaturalFloat binds to "objc:AVAudioRecorder.currentPosition"
private foreign handler objC_AVAudioRecorderSet(in pAVAudioRecorder as ObjcId, in pValue as ObjcId, in pSelector as ObjcId) returns nothing binds to "objc:AVAudioRecorder.-setValue:forKey:"

--------------------- Public handler:
private variable mAVAudioRecorderInstance as optional ObjcId
private variable sAVAudioRecorderStopCallbackHandlerPtr as optional ObjcBlockPointer
private variable mAVAudioFormat as optional ObjcId

private variable sTarget as ScriptObject

public handler AVAudioRecorderStopCallback(in pBlock as ObjcBlockPointer)
  --  foreign handler MCEngineAddRunloopAction(in pCallback as Pointer, in pContext as optional Pointer, out rAction as Pointer) returns CBool
  --  foreign handler MCEngineRemoveRunloopAction(in pAction as Pointer) returns nothing
  --  foreign handler MCEngineRunloopWait() returns CBool
  --  foreign handler MCEngineRunloopBreakWait() returns nothing

   -- variable tObject as ScriptObject
   -- resolve script object "this stack"
   -- put the result into tObject

   -- send command "AVAudioRecorderDone" to tObject -- with [1,2,3]
   -- variable tCurrentPosition as NaturalFloat
	-- variable tCurrentPosition as Number
	-- variable rString as String
	-- unsafe
	-- put objC_AVAudioRecorderCurrentPosition(mAVAudioRecorderInstance) into tCurrentPosition
	-- put objC_AVAudioRecorderCurrentPosition(mAVAudioRecorderInstance,tNewPosition) into tCurrentPosition
	-- end unsafe
	-- put tCurrentPosition formatted as string into rString
    -- log sTarget
	--send "AVAudioRecorderStopped" to sTarget with tCurrentPosition
	-- if the message was not handled then
		-- log sTarget
	--put tCurrentPosition formatted as string into rString
	 -- post "AVAudioRecorderStopped" to sTarget with [tCurrentPosition]
	 -- post "AVAudioRecorderStopped" to sTarget with [rString]
	 post "AVAudioRecordingStopped" to sTarget
		-- MCEngineRunloopWait() -- true
	-- MCEngineRunloopBreakWait()
	 -- log "The message was not handled"
end handler

public handler AVAudioRecorderInitCallback()
    if sAVAudioRecorderStopCallbackHandlerPtr is nothing then
  	 if not CreateObjcBlockPointerFromHandler(AVAudioRecorderStopCallback, sAVAudioRecorderStopCallbackHandlerPtr) then
  	   put nothing into sAVAudioRecorderStopCallbackHandlerPtr
  	 end if
     --  put the caller into sTarget
     resolve script object "this stack"
     put the result into sTarget
   end if
end handler

public handler AVAudioRecorderRemoveCallback()
	if sAVAudioRecorderStopCallbackHandlerPtr is not nothing then
		DeleteObjcBlockPointer(sAVAudioRecorderStopCallbackHandlerPtr)
		put nothing into sAVAudioRecorderStopCallbackHandlerPtr
	 end if
end handler
/**
Loads a MIDI file from and a Soundbank file from file paths and prepares for playback.

Example:
AVAudioRecorderLoad "/Users/Me/MIDIMusic.mid","/System/Library/Components/CoreAudio.component/Contents/Resources/gs_instruments.dls"

Parameters:
MIDIfilePath (string): the file path to a MIDI file
SoundFontPath (string): the file path to a SoundBank SF2 or DLS file

Description:
Loads a MIDI file from and a Soundbank file in either SoundFont2 or
Downloadable Sound DLS format from absolute file paths passed in and
"prerolls" the data, preparing it for playback.
*/



private variable sRequestPermissionsCompletionHandler as optional ObjcBlockPointer
-- private variable sTarget as ScriptObject

public handler AVAudioRecorderLoad(in pRecordToFilePath as String) returns nothing

	if (the operating system is "mac") or (the operating system is "ios") then
		--- need NSURL objects to pass to AVAudioRecorder
		-- variable tFileNSURL as ObjcObject
		variable tNSObject as ObjcObject
		variable tString as String
		variable tRecordToFileNSURL as ObjcObject
		--- need NSError object to pass to AVAudioRecorder
		variable tNSError as optional ObjcObject
	   variable tNSErrorDescriptionRef as ObjcObject
	   variable tErrorDescription as optional String
		variable tAny as optional any

		variable tSuccess as Boolean

		variable tRecSettingsArray as Array
		variable tRecSettingsNSDict as ObjcObject
		variable tAVAudioSession as ObjcObject
		-- variable tIsDir as optional CBool
		-- put false into tIsDir
		unsafe
			put objC_NSErrorAlloc() into tNSError

			--- get shared AVAudio Session, then get category to check if recordable mode
			put objC_AVAudioSession() into tAVAudioSession
			put objC_AVAudioSessionGetCategory(tAVAudioSession) into tNSObject
			put StringFromNSString(tNSObject) into tString
			log tString
			put objC_AVAudioSessionSetCategory(tAVAudioSession, StringToNSString("AVAudioSessionCategoryPlayAndRecord"), tNSError) into tSuccess
			if tNSError is not nothing then
				  put c_CFErrorCopyDescription(tNSError) into tNSErrorDescriptionRef
				  put StringFromNSString(tNSErrorDescriptionRef) into tErrorDescription
				  log tErrorDescription
			  end if
			  put objC_AVAudioSessionGetCategory(tAVAudioSession) into tNSObject
  			put StringFromNSString(tNSObject) into tString
  			log tString

			if not CreateObjcBlockPointerFromHandler(RequestPermissionsCompletionHandler, sRequestPermissionsCompletionHandler) then
				put nothing into sRequestPermissionsCompletionHandler
				return false
			end if

			-- vPermission to Record
			-- recordPermission -- The current recording permission status.
			-- -requestRecordPermission: -- Requests the user’s permission to record audio.
			objC_AVAudioSessionRequestRecordPermission(tAVAudioSession,sRequestPermissionsCompletionHandler)
			-- put objC_NSURLfileURLWithPath(StringToNSString(pRecordToFilePath)) into tFileNSURL
			-- put objC_NSURLfileURLWithPath(StringToNSString(pFilePath),tIsDir) into tFileNSURL
		 	put objC_NSURLfileURLWithPath(StringToNSString(pRecordToFilePath)) into tRecordToFileNSURL
			-- put objC_NSURLfileURLWithPath(StringToNSString(pSoundFontPath),tIsDir) into tSoundFontNSURL
     		-- NEED to Add Checking for validity of URLs or the  Engine will crash when it passes an invalid URL to AVAudioRecorder!
			-- For some reason, AVAudioRecorder requires the proper file extension (.mp3, .ima4, etc.) when using a file URL for recording

    		put objC_AVAudioRecorderAlloc() into mAVAudioRecorderInstance
			----------------------------------------------------set audio recording setting
			-- AVAudioSession sharedInstance] setCategory:AVAudioSessionCategoryRecord error:&error
			-- kAudioFormatMPEG4AAC = 'aac '
			-- kAudioFormatAppleIMA4 = 'ima4'
			--	kAudioFormatLinearPCM = 'lpcm'
			-- kAudioFormatAppleLossless = 'alac'

			put NumberToNSNumber(getIntegerFromFourCharCodeBigEndian("lpcm")) into tRecSettingsArray[" A V F o r m a t I D "]
			-- put "aac " into tRecSettingsArray[" A V F o r m a t I D K e y "]
			put NumberToNSNumber(44100.0) into tRecSettingsArray[" A V S a m p l e R a t e "]
			put NumberToNSNumber(2) into tRecSettingsArray[" A V N u m b e r O f C h a n n e l s "]
			put NumberToNSNumber(16) into tRecSettingsArray[" A V L i n e a r P C M B i t D e p t h  "]
			put 0 into tRecSettingsArray[" A V L i n e a r P C M I s B i g E n d i a n  "]
			-- log tRecSettingsArray
			put ArrayToNSDictionary(tRecSettingsArray) into tRecSettingsNSDict
			-- log tRecSettingsNSDict
		   put objC_AVAudioRecorderInitWithURLAndSettings(mAVAudioRecorderInstance, tRecordToFileNSURL, tRecSettingsNSDict, tNSError) into mAVAudioRecorderInstance
			log ["AVAudioRecorderInstance:", mAVAudioRecorderInstance]

			-- put objC_AVAudioFormatAlloc() into mAVAudioFormat
			-- put objC_AVAudioFormatInitStandardFormatWithSampleRateAndChannels(mAVAudioFormat, 44100, 1) into mAVAudioFormat
			-- put objC_AVAudioFormatInitStandardFormatWithSampleRateAndChannels(mAVAudioFormat, NumberToNSNumber(44100), NumberToNSNumber(1) ) into mAVAudioFormat
			-- The returned AVAudioFormat instance uses the AVAudioPCMFormatFloat32 format. AVAudioCommonFormat Enumeration AVAudioPCMFormatFloat32 = 1
			-- log ["mAVAudioFormat:", mAVAudioFormat]
			-- put objC_AVAudioRecorder(mAVAudioRecorderInstance, tFileNSURL ,tSoundFontNSURL, tNSError) into mAVAudioRecorderInstance
			--put objC_AVAudioRecorderInitWithURLAndFormat(mAVAudioRecorderInstance, tRecordToFileNSURL, mAVAudioFormat, tNSError) into mAVAudioRecorderInstance
			if tNSError is not nothing then
				  put c_CFErrorCopyDescription(tNSError) into tNSErrorDescriptionRef
				  put StringFromNSString(tNSErrorDescriptionRef) into tErrorDescription
				  log tErrorDescription
			  end if

			if mAVAudioRecorderInstance is not nothing then
				put objC_AVAudioRecorderPrepareToRecord(mAVAudioRecorderInstance) into tSuccess
				log ["Prepare Success:", tSuccess]
				put objC_AVAudioRecorderRecord(mAVAudioRecorderInstance) into tSuccess
				log ["Record Success:", tSuccess]
			end if
		end unsafe
	end if
end handler

public handler RequestPermissionsCompletionHandler(in pBlock as ObjcBlockPointer, in pGranted as CBool)
	log "AudioLibraryRequestPermissionsCallback"  -- to sTarget with [pGranted]
end handler


/**
Stops Recording.

Example:
AVAudioRecorderStop

Parameters:

Description:
*/
public handler AVAudioRecorderStop() returns nothing
	variable tSuccess as Boolean
		unsafe
    		put objC_AVAudioRecorderStop(mAVAudioRecorderInstance) into tSuccess
		end unsafe
end handler


/**
Plays the data that was loaded with either AVAudioRecorderLoad or AVAudioRecorderLoadURLs

Example:
AVAudioRecorderPlay

Description:
Plays the data that was loaded with either AVAudioRecorderLoad or AVAudioRecorderLoadURLs
*/
public handler AVAudioRecorderPlay()
	-- variable tAVAudioRecorderCompletionHandler as optional pointer
	unsafe
	  -- objC_AVAudioRecorderPlay(mAVAudioRecorderInstance, sAVAudioRecorderStopCallbackHandlerPtr)
	end unsafe
end handler

/**
Checks to see if MIDI Data is currently being played back

Example:
 if AVAudioRecorderIsPlaying() then AVAudioRecorderStop

Description:
A boolean that indicates if MIDI Data is currently being played back.
*/
public handler AVAudioRecorderIsPlaying() returns Boolean
	unsafe
	-- return objC_AVAudioRecorderPlaying(mAVAudioRecorderInstance)
	end unsafe
end handler

/**
Sets the decimal rate of playback; 1.0 being original, 0.5 half, and 2.0 double speed.

Example:
AVAudioRecorderSetRate 0.75 -- 3/4 the speed of original MIDI file tempo.

Parameters:
playbackRate (Number): a decimal number to set the playback rate to.

Description:
Sets the decimal rate of playback; 1.0 being the original tempo of the MIDI File.
Set playbackRate to 0.5 for half the speed or the original tempo or 2.0 to double the speed.
*/
public handler AVAudioRecorderSetRate(in playbackRate as Real) returns nothing
	unsafe
    -- objC_AVAudioRecorderSet(mAVAudioRecorderInstance,NumberToNSNumber(playbackRate),StringToNSString("rate"))
	end unsafe
end handler

/**
Returns the length of a loaded sequence in seconds and microseconds.

Example:
function SecsToHrsMinSecs pSecs -- in seconds.millisecs
   lock screen
   split pSecs by "."
   put trunc(pSecs[1]) into deltaTime
   put trunc(deltaTime div 3600) into h -- hours
   put trunc((deltaTime - (h * 3600)) / 60) into m -- minutes
   put deltaTime - (h * 3600) - (m * 60) into s -- seconds
   put format( "%01i:%02i:%02i", h, m, s ) &":"& pSecs[2] into displayTime
   return displayTime
end SecsToHrsMinSecs
put "The MIDI Sequence is " & SecsToHrsMinSecs(AVAudioRecorderDuration()) & " long"

Example:
set the endValue of scrollbar "PlayBackProgress" to AVAudioRecorderDuration()

Description:
Returns the length of a sequence in seconds and microseconds. A sequence
must first be loaded into memory using AVAudioRecorderLoad or AVMIDIPlayetLoadURLs.
*/
public handler AVAudioRecorderDuration() returns String
	variable tDuration as optional NaturalFloat
	unsafe
	-- put objC_AVAudioRecorderInfo(mAVAudioRecorderInstance,StringToNSString("duration")) into tDuration
	-- put objC_AVAudioRecorderDuration(mAVAudioRecorderInstance) into tDuration
   --  return tDuration formatted as string
	end unsafe
end handler

/**
Returns the current position of playing sequence in seconds and microseconds.

Example:
function SecsToHrsMinSecs pSecs -- in seconds.millisecs
   lock screen
   split pSecs by "."
   put trunc(pSecs[1]) into deltaTime
   put trunc(deltaTime div 3600) into h -- hours
   put trunc((deltaTime - (h * 3600)) / 60) into m -- minutes
   put deltaTime - (h * 3600) - (m * 60) into s -- seconds
   put format( "%01i:%02i:%02i", h, m, s ) &":"& pSecs[2] into displayTime
   return displayTime
end SecsToHrsMinSecs
put SecsToHrsMinSecs(AVAudioRecorderSetCurrentPosition())

Example:
set the thumbPosition of scrollBar "PlayBackProgress" to AVAudioRecorderSetCurrentPosition()

Description:
Returns the current position of playback in seconds and microseconds.
Use for displaying the current playback progress or current time within a sequence.
Note that current position will continue to increment past the sequence duration
until a stop command is issued.
*/
public handler AVAudioRecorderGetCurrentPosition() returns String
	variable tCurrentPosition as NaturalFloat
	-- variable tNewPosition as NaturalFloat
	unsafe
	-- put objC_AVAudioRecorderCurrentPosition(mAVAudioRecorderInstance) into tCurrentPosition
	-- put objC_AVAudioRecorderCurrentPosition(mAVAudioRecorderInstance,tNewPosition) into tCurrentPosition
    return tCurrentPosition formatted as string
	end unsafe
end handler

/**
Sets the current position in seconds.microseconds for a sequence to play from.

Example:
AVAudioRecorderSetCurrentPosition(the thumbPosition of scrollBar "PlayBackProgress")

Example:
AVAudioRecorderSetCurrentPosition 10.1 -- sets the position to 10 and 1/10th of a second.

Description:
Sets the current position in seconds.microseconds for a sequence to play from.
A sequence must first be loaded into memory using AVAudioRecorderLoad or AVMIDIPlayetLoadURLs
before the current position can be set.
Use for "scrubbing" to different points within a sequence or for pause-resume functionality.
*/
public handler AVAudioRecorderSetCurrentPosition(in pNewPosition as Real) returns nothing
	-- variable tNewPosition as NaturalFloat
	unsafe
	-- objC_AVAudioRecorderSet(mAVAudioRecorderInstance,NumberToNSNumber(pNewPosition),StringToNSString("currentPosition"))
	end unsafe
end handler


public handler getIntegerFromFourCharCodeLittleEndian(in pStr as String) returns optional Uint32
   variable tUint32 as Uint32
   put (the code of char 4 of pStr) * 16777216 into tUint32 ---  256 * 256 * 256
   put tUint32 + ((the code of char 3 of pStr) * 65536 ) into tUint32 -- 256 * 256
   put tUint32 + ((the code of char 2 of pStr) * 256 ) into tUint32
   put tUint32 + (the code of char 1 of pStr) into tUint32
   return tUint32
end handler

public handler getIntegerFromFourCharCodeBigEndian(in pStr as String) returns optional Uint32
   variable tUint32 as Uint32
   put (the code of char 1 of pStr) * 16777216 into tUint32
   put tUint32 + ((the code of char 2 of pStr) * 65536 ) into tUint32
   put tUint32 + ((the code of char 3 of pStr) * 256 ) into tUint32
   put tUint32 + (the code of char 4 of pStr) into tUint32
   return tUint32
end handler

-- foreign handler MCDataGetBytePtr(in pData as Data) returns Pointer binds to "<builtin>"
public handler getFourCharCodeFromUint32( in pNum as optional any) returns optional String
   -- 1383023468 = appl
   variable tStr as String
   variable tTempStr as String
   variable tNum as Number
   variable tBinsStr as String
   log pNum
   if pNum is not nothing then
      if pNum is a number then
         put pNum formatted as string into pNum
      end if
      put pNum converted from base 10 to base 16 into tBinsStr
      if (the number of chars in tBinsStr) < 8 then
         put 8 - (the number of chars in tBinsStr) into tNum
         repeat tNum times
            put "0" before tBinsStr
         end repeat
         -- log tBinsStr
      end if
       put ( (char 1 to 2 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
       put the char with code (tTempStr parsed as number) into tStr
       put ( (char 3 to 4 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
       put the char with code (tTempStr parsed as number) after tStr
       put ( (char 5 to 6 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
       put the char with code (tTempStr parsed as number) after tStr
       put ( (char 7 to 8 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
       put the char with code (tTempStr parsed as number) after tStr
      return tStr
   else
      return the empty string
   end if
end handler


end library
